#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import print_function
import datetime
import sys
import subprocess
import json
import mallard.utils
import re
import base64

def get_kv_data(app):
    return mallard.utils.callconsulapi("/v1/kv/mallard/apps/{}".format(app))

def deploy(app):
    print("Deploy app {}".format(app))
    data = get_kv_data(app)
    if not data:
        print("Error: app {} not found")
        sys.exit(1)
    value = base64.b64decode(data[0]['Value'])
    jvalue = json.loads(value)
    image = create(jvalue['image'], jvalue.get('name'))
    start(image['Id'])

def create(image, name):
    data = { "Image": image }
    url = "containers/create"
    if name and not re.compile("^[a-zA-Z0-9_-]+$").match(name):
        print("Error: '{}' is a invalid name.".format(name))
        sys.exit(1)
    print("Use image: {}".format(image))
    if name: url = "{}?name={}".format(url, name)
    ret = mallard.utils.callapi_post(url, data=data)
    try:
        return json.loads(ret)
    except:
        print("Error: Faild to create image")
        print(ret)
        sys.exit(1)

def start(uuid):
    print("Start container {}".format(uuid))
    ret = mallard.utils.callapi_post("containers/{}/start".format(uuid))
    if len(ret) > 0:
        print("Error: Faild to start image {}".format(uuid))
        print(ret)
        sys.exit(1)

def stop(uuid_or_name):
    c = mallard.utils.search_for_container(uuid_or_name)
    uuid = c['Id']
    print("Stop container {}".format(uuid))
    ret = mallard.utils.callapi_post("containers/{}/stop".format(uuid))
    if len(ret) > 0:
        print("Error: Faild to stop image {}".format(uuid))
        print(ret)
        sys.exit(1)
