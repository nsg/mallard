#!/usr/bin/env python
# -*- coding: utf-8 -*-

import urllib
import urllib2
import json
import re
import sys

swarm_host = "{{ ansible_mallard.ipv4.address }}"
swarm_hosts = [{% for host in groups['all'] %}"{{ hostvars[host]['ansible_mallard']['ipv4']['address'] }}", {% endfor %}]
swarm_port = 2475
consul_port = 8500

def color(string, color="0", bold=False, reverse=False, underline=False):
    attr = []
    attr.append(color)

    if bold:
        attr.append('1')
    elif reverse:
        attr.append('7')
    elif underline:
        attr.append('4')

    if sys.stdout.isatty():
        return '\x1b[%sm%s\x1b[0m' % (';'.join(attr), string)
    else:
        return string

def callapi(path, host=swarm_host, port=swarm_port):
    try:
        response = urllib2.urlopen("http://{}:{}/{}".format(host, port, path))
        return json.loads(response.read())
    except:
        print "Failed to open http://{}:{}/{}".format(host, port, path)
    return None

def callapi_post(path, host=swarm_host, port=swarm_port, data={}):
    try:
        req = urllib2.Request("http://{}:{}/{}".format(host, port, path), json.dumps(data))
        req.add_header("Content-Type",'application/json')
        response = urllib2.urlopen(req)
        return response.read()
    except:
        print "Failed to open http://{}:{}/{}".format(host, port, path)
        print "Data {}".format(urllib.urlencode(data))
    return None

def callconsulapi(path):
    try:
        response = urllib2.urlopen("http://{}:{}/{}".format(swarm_host, consul_port, path))
        return json.loads(response.read())
    except:
        print "Failed to open http://{}:{}/{}".format(swarm_host, consul_port, path)
    return None

def search_for_container(name):
    for c in get_containers():
        if re.match(name, c['Id']) is not None:
            return c
        for n in c['Names']:
            if re.match(name, n.split("/")[2]) is not None:
                return c

def get_containers():
    return callapi("containers/json")
